/*
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

import { dirname } from 'path-unified';
import chalk from 'chalk';
import { fs } from 'style-dictionary/fs';
import filterTokens from './filterTokens.js';
import GroupMessages, { verbosityInfo } from './utils/groupMessages.js';

import createFormatArgs from './utils/createFormatArgs.js';

/**
 * @typedef {import('../types/Volume.d.ts').Volume} Volume
 * @typedef {import('../types/DesignToken.d.ts').Dictionary} Dictionary
 * @typedef {import('../types/DesignToken.d.ts').TransformedToken} TransformedToken
 * @typedef {import('../types/Config.d.ts').PlatformConfig} PlatformConfig
 * @typedef {import('../types/Config.d.ts').Config} Config
 * @typedef {import('../types/File.d.ts').File} File
 * @typedef {import('../types/Filter.d.ts').Matcher} Matcher
 * @typedef {import('../types/Format.d.ts').FormatterArguments} FormatterArguments
 */

/**
 * Takes the style token object and a format and returns a
 * string that can be written to a file.
 * @memberOf StyleDictionary
 * @param {File} file
 * @param {PlatformConfig} platform
 * @param {Dictionary} dictionary
 * @param {Config} options
 * @param {Volume} [vol]
 */
export default async function buildFile(file, platform = {}, dictionary, options, vol = fs) {
  const { destination } = file || {};
  const filter = /** @type {Matcher|undefined} */ (file.filter);
  let { format } = file || {};

  if (typeof format !== 'function') throw new Error('Please enter a valid file format');
  if (typeof destination !== 'string') throw new Error('Please enter a valid destination');

  // get if the format is nested, this needs to be done before
  // the function is bound
  const nested = format.nested;
  // to maintain backwards compatibility we bind the format to the file object
  format = format.bind(file);
  let fullDestination = destination;

  // if there is a build path, prepend the full destination with it
  if (platform.buildPath) {
    fullDestination = platform.buildPath + fullDestination;
  }

  const dir = dirname(fullDestination);
  if (!vol.existsSync(dir)) vol.mkdirSync(dir, { recursive: true });

  const filteredTokens = await filterTokens(dictionary, filter, options);
  const filteredDictionary = Object.assign({}, dictionary, {
    tokens: filteredTokens.tokens,
    allTokens: filteredTokens.allTokens,
    // keep the unfiltered tokens object for reference resolution
    unfilteredTokens: dictionary.tokens,
  });

  // if tokens object is empty, return without creating a file
  if (
    Object.hasOwn(filteredTokens, 'tokens') &&
    Object.keys(filteredTokens.tokens).length === 0 &&
    filteredTokens.tokens.constructor === Object
  ) {
    let warnNoFile = `No tokens for ${destination}. File not created.`;
    if (platform.log?.warnings === 'error') {
      throw new Error(warnNoFile);
    } else if (platform.log?.verbosity !== 'silent' && platform.log?.warnings !== 'disabled') {
      // eslint-disable-next-line no-console
      console.log(chalk.rgb(255, 140, 0)(warnNoFile));
    }
    return null;
  }

  /**
   * Check for token name Collisions
   * @type {Record<string, TransformedToken[]>}
   */
  const nameCollisionObj = {};
  filteredTokens.allTokens &&
    filteredTokens.allTokens.forEach((tokenData) => {
      let tokenName = tokenData.name;
      if (!nameCollisionObj[tokenName]) {
        nameCollisionObj[tokenName] = [];
      }
      nameCollisionObj[tokenName].push(tokenData);
    });

  const PROPERTY_NAME_COLLISION_WARNINGS =
    GroupMessages.GROUP.PropertyNameCollisionWarnings + ':' + destination;
  GroupMessages.clear(PROPERTY_NAME_COLLISION_WARNINGS);
  Object.keys(nameCollisionObj).forEach((tokenName) => {
    if (nameCollisionObj[tokenName].length > 1) {
      let collisions = nameCollisionObj[tokenName]
        .map((token) => {
          let tokenPathText = chalk.rgb(255, 69, 0)(token.path.join('.'));
          let valueText = chalk.rgb(255, 140, 0)(options.usesDtcg ? token.$value : token.value);
          return tokenPathText + '   ' + valueText;
        })
        .join('\n        ');
      GroupMessages.add(
        PROPERTY_NAME_COLLISION_WARNINGS,
        `Output name ${chalk
          .rgb(255, 69, 0)
          .bold(tokenName)} was generated by:\n        ${collisions}`,
      );
    }
  });

  const tokenNamesCollisionCount = GroupMessages.count(PROPERTY_NAME_COLLISION_WARNINGS);

  const formattedContent = await format(
    createFormatArgs({
      dictionary: filteredDictionary,
      platform,
      options,
      file,
    }),
  );

  await vol.promises.writeFile(fullDestination, formattedContent);

  const filteredReferencesCount = GroupMessages.count(GroupMessages.GROUP.FilteredOutputReferences);

  // don't show name collision warnings for nested type formats
  // because they are not relevant.
  if (
    (nested || tokenNamesCollisionCount === 0) &&
    filteredReferencesCount === 0 &&
    platform.log?.verbosity !== 'silent'
  ) {
    // eslint-disable-next-line no-console
    console.log(chalk.bold.green(`✔︎ ${fullDestination}`));
  } else {
    const warnHeader = `⚠️ ${fullDestination}`;
    if (tokenNamesCollisionCount > 0) {
      const tokenNamesCollisionWarnings = GroupMessages.fetchMessages(
        PROPERTY_NAME_COLLISION_WARNINGS,
      ).join('\n    ');
      const title = `While building ${chalk
        .rgb(255, 69, 0)
        .bold(
          destination,
        )}, token collisions were found; output may be unexpected. Ignore this warning if intentional.`;
      const help = chalk.rgb(
        255,
        165,
        0,
      )(
        [
          'This many-to-one issue is usually caused by some combination of:',
          '* conflicting or similar paths/names in token definitions',
          '* platform transforms/transformGroups affecting names, especially when removing specificity',
          '* overly inclusive file filters',
        ].join('\n    '),
      );
      const warn =
        platform.log?.verbosity === 'verbose'
          ? `${warnHeader}\n${title}\n    ${tokenNamesCollisionWarnings}\n${help}`
          : `${warnHeader}\n${title}\n\n${verbosityInfo}`;
      if (platform?.log?.warnings === 'error') {
        throw new Error(warn);
      } else if (platform.log?.verbosity !== 'silent' && platform.log?.warnings !== 'disabled') {
        // eslint-disable-next-line no-console
        console.log(chalk.rgb(255, 140, 0).bold(warn));
      }
    }

    if (filteredReferencesCount > 0) {
      const filteredReferencesWarnings = GroupMessages.flush(
        GroupMessages.GROUP.FilteredOutputReferences,
      ).join('\n    ');
      const title = `While building ${chalk
        .rgb(255, 69, 0)
        .bold(
          destination,
        )}, filtered out token references were found; output may be unexpected. Ignore this warning if intentional.`;
      const help = chalk.rgb(
        255,
        165,
        0,
      )(['This is caused when combining a filter and `outputReferences`.'].join('\n    '));
      const warn =
        platform.log?.verbosity === 'verbose'
          ? `${warnHeader}\n${title}\nHere are the references that are used but not defined in the file:\n    ${filteredReferencesWarnings}\n${help}`
          : `${warnHeader}\n${title}\n\n${verbosityInfo}`;
      if (platform?.log?.warnings === 'error') {
        throw new Error(warn);
      } else if (platform.log?.verbosity !== 'silent' && platform.log?.warnings !== 'disabled') {
        // eslint-disable-next-line no-console
        console.log(chalk.rgb(255, 140, 0).bold(warn));
      }
    }
  }
}
