/*
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

import path from '@bundled-es-modules/path-browserify';
import chalk from 'chalk';
import { fs } from 'style-dictionary/fs';
import filterTokens from './filterTokens.js';
import GroupMessages from './utils/groupMessages.js';

import createFormatArgs from './utils/createFormatArgs.js';

/**
 * Takes the style token object and a format and returns a
 * string that can be written to a file.
 * @memberOf StyleDictionary
 * @param {Object} file
 * @param {Object} platform
 * @param {Object} dictionary
 * @returns {null}
 */
export default function buildFile(file = {}, platform = {}, dictionary = {}) {
  const { destination, filter } = file || {};
  let { format } = file || {};

  if (typeof format !== 'function') throw new Error('Please enter a valid file format');
  if (typeof destination !== 'string') throw new Error('Please enter a valid destination');

  // get if the format is nested, this needs to be done before
  // the function is bound
  const nested = format.nested;
  // to maintain backwards compatibility we bind the format to the file object
  format = format.bind(file);
  let fullDestination = destination;

  // if there is a build path, prepend the full destination with it
  if (platform.buildPath) {
    fullDestination = platform.buildPath + fullDestination;
  }

  const dirname = path.dirname(fullDestination);
  if (!fs.existsSync(dirname)) fs.mkdirSync(dirname, { recursive: true });

  const filteredTokens = filterTokens(dictionary, filter);
  const filteredDictionary = Object.assign({}, dictionary, {
    tokens: filteredTokens.tokens,
    allTokens: filteredTokens.allTokens,
    // keep the unfiltered tokens object for reference resolution
    _tokens: dictionary.tokens,
  });

  // if tokens object is empty, return without creating a file
  if (
    filteredTokens.hasOwnProperty('tokens') &&
    Object.keys(filteredTokens.tokens).length === 0 &&
    filteredTokens.tokens.constructor === Object
  ) {
    let warnNoFile = `No tokens for ${destination}. File not created.`;
    console.log(chalk.rgb(255, 140, 0)(warnNoFile));
    return null;
  }

  // Check for token name Collisions
  const nameCollisionObj = {};
  filteredTokens.allTokens &&
    filteredTokens.allTokens.forEach((tokenData) => {
      let tokenName = tokenData.name;
      if (!nameCollisionObj[tokenName]) {
        nameCollisionObj[tokenName] = [];
      }
      nameCollisionObj[tokenName].push(tokenData);
    });

  const PROPERTY_NAME_COLLISION_WARNINGS =
    GroupMessages.GROUP.PropertyNameCollisionWarnings + ':' + destination;
  GroupMessages.clear(PROPERTY_NAME_COLLISION_WARNINGS);
  Object.keys(nameCollisionObj).forEach((tokenName) => {
    if (nameCollisionObj[tokenName].length > 1) {
      let collisions = nameCollisionObj[tokenName]
        .map((tokens) => {
          let tokenPathText = chalk.rgb(255, 69, 0)(tokens.path.join('.'));
          let valueText = chalk.rgb(255, 140, 0)(tokens.value);
          return tokenPathText + '   ' + valueText;
        })
        .join('\n        ');
      GroupMessages.add(
        PROPERTY_NAME_COLLISION_WARNINGS,
        `Output name ${chalk
          .rgb(255, 69, 0)
          .bold(tokenName)} was generated by:\n        ${collisions}`,
      );
    }
  });

  let tokenNamesCollisionCount = GroupMessages.count(PROPERTY_NAME_COLLISION_WARNINGS);
  fs.writeFileSync(
    fullDestination,
    format(
      createFormatArgs({
        dictionary: filteredDictionary,
        platform,
        file,
      }),
      platform,
      file,
    ),
  );

  let filteredReferencesCount = GroupMessages.count(GroupMessages.GROUP.FilteredOutputReferences);

  // don't show name collision warnings for nested type formats
  // because they are not relevant.
  if ((nested || tokenNamesCollisionCount === 0) && filteredReferencesCount === 0) {
    console.log(chalk.bold.green(`✔︎ ${fullDestination}`));
  } else {
    const warnHeader = `⚠️ ${fullDestination}`;
    if (tokenNamesCollisionCount > 0) {
      let tokenNamesCollisionWarnings = GroupMessages.fetchMessages(
        PROPERTY_NAME_COLLISION_WARNINGS,
      ).join('\n    ');
      let title = `While building ${chalk
        .rgb(255, 69, 0)
        .bold(destination)}, token collisions were found; output may be unexpected.`;
      let help = chalk.rgb(
        255,
        165,
        0,
      )(
        [
          'This many-to-one issue is usually caused by some combination of:',
          '* conflicting or similar paths/names in token definitions',
          '* platform transforms/transformGroups affecting names, especially when removing specificity',
          '* overly inclusive file filters',
        ].join('\n    '),
      );
      let warn = `${warnHeader}\n${title}\n    ${tokenNamesCollisionWarnings}\n${help}`;
      if (platform?.log === 'error') {
        throw new Error(warn);
      } else {
        console.log(chalk.rgb(255, 140, 0).bold(warn));
      }
    }

    if (filteredReferencesCount > 0) {
      let filteredReferencesWarnings = GroupMessages.flush(
        GroupMessages.GROUP.FilteredOutputReferences,
      ).join('\n    ');
      let title = `While building ${chalk
        .rgb(255, 69, 0)
        .bold(
          destination,
        )}, filtered out token references were found; output may be unexpected. Here are the references that are used but not defined in the file`;
      let help = chalk.rgb(
        255,
        165,
        0,
      )(['This is caused when combining a filter and `outputReferences`.'].join('\n    '));
      let warn = `${warnHeader}\n${title}\n    ${filteredReferencesWarnings}\n${help}`;
      if (platform?.log === 'error') {
        throw new Error(warn);
      } else {
        console.log(chalk.rgb(255, 140, 0).bold(warn));
      }
    }
  }
}
