/*
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

import path from '@bundled-es-modules/path-browserify';
import chalk from 'chalk';
import { fs } from '../fs.js';
import filterProperties from './filterProperties.js';
import GroupMessages from './utils/groupMessages.js';

import createFormatArgs from './utils/createFormatArgs.js';

/**
 * Takes the style property object and a format and returns a
 * string that can be written to a file.
 * @memberOf StyleDictionary
 * @param {Object} file
 * @param {Object} platform
 * @param {Object} dictionary
 * @returns {null}
 */
export default function buildFile(file = {}, platform = {}, dictionary = {}) {
  const { destination, filter } = file || {};
  let { format } = file || {};

  if (typeof format !== 'function') throw new Error('Please enter a valid file format');
  if (typeof destination !== 'string') throw new Error('Please enter a valid destination');

  // get if the format is nested, this needs to be done before
  // the function is bound
  const nested = format.nested;
  // to maintain backwards compatibility we bind the format to the file object
  format = format.bind(file);
  let fullDestination = destination;

  // if there is a build path, prepend the full destination with it
  if (platform.buildPath) {
    fullDestination = platform.buildPath + fullDestination;
  }

  const dirname = path.dirname(fullDestination);
  if (!fs.existsSync(dirname)) fs.mkdirSync(dirname, { recursive: true });

  const filteredProperties = filterProperties(dictionary, filter);
  const filteredDictionary = Object.assign({}, dictionary, {
    properties: filteredProperties.properties,
    allProperties: filteredProperties.allProperties,
    tokens: filteredProperties.properties,
    allTokens: filteredProperties.allProperties,
    // keep the unfiltered properties object for reference resolution
    _properties: dictionary.properties,
  });

  // if properties object is empty, return without creating a file
  if (
    filteredProperties.hasOwnProperty('properties') &&
    Object.keys(filteredProperties.properties).length === 0 &&
    filteredProperties.properties.constructor === Object
  ) {
    let warnNoFile = `No properties for ${destination}. File not created.`;
    console.log(chalk.rgb(255, 140, 0)(warnNoFile));
    return null;
  }

  // Check for property name Collisions
  const nameCollisionObj = {};
  filteredProperties.allTokens &&
    filteredProperties.allTokens.forEach((propertyData) => {
      let propertyName = propertyData.name;
      if (!nameCollisionObj[propertyName]) {
        nameCollisionObj[propertyName] = [];
      }
      nameCollisionObj[propertyName].push(propertyData);
    });

  const PROPERTY_NAME_COLLISION_WARNINGS =
    GroupMessages.GROUP.PropertyNameCollisionWarnings + ':' + destination;
  GroupMessages.clear(PROPERTY_NAME_COLLISION_WARNINGS);
  Object.keys(nameCollisionObj).forEach((propertyName) => {
    if (nameCollisionObj[propertyName].length > 1) {
      let collisions = nameCollisionObj[propertyName]
        .map((properties) => {
          let propertyPathText = chalk.rgb(255, 69, 0)(properties.path.join('.'));
          let valueText = chalk.rgb(255, 140, 0)(properties.value);
          return propertyPathText + '   ' + valueText;
        })
        .join('\n        ');
      GroupMessages.add(
        PROPERTY_NAME_COLLISION_WARNINGS,
        `Output name ${chalk
          .rgb(255, 69, 0)
          .bold(propertyName)} was generated by:\n        ${collisions}`,
      );
    }
  });

  let propertyNamesCollisionCount = GroupMessages.count(PROPERTY_NAME_COLLISION_WARNINGS);
  fs.writeFileSync(
    fullDestination,
    format(
      createFormatArgs({
        dictionary: filteredDictionary,
        platform,
        file,
      }),
      platform,
      file,
    ),
  );

  let filteredReferencesCount = GroupMessages.count(GroupMessages.GROUP.FilteredOutputReferences);

  // don't show name collision warnings for nested type formats
  // because they are not relevant.
  if ((nested || propertyNamesCollisionCount === 0) && filteredReferencesCount === 0) {
    console.log(chalk.bold.green(`✔︎ ${fullDestination}`));
  } else {
    console.log(`⚠️ ${fullDestination}`);
    if (propertyNamesCollisionCount > 0) {
      let propertyNamesCollisionWarnings = GroupMessages.fetchMessages(
        PROPERTY_NAME_COLLISION_WARNINGS,
      ).join('\n    ');
      let title = `While building ${chalk
        .rgb(255, 69, 0)
        .bold(destination)}, token collisions were found; output may be unexpected.`;
      let help = chalk.rgb(
        255,
        165,
        0,
      )(
        [
          'This many-to-one issue is usually caused by some combination of:',
          '* conflicting or similar paths/names in property definitions',
          '* platform transforms/transformGroups affecting names, especially when removing specificity',
          '* overly inclusive file filters',
        ].join('\n    '),
      );
      let warn = `${title}\n    ${propertyNamesCollisionWarnings}\n${help}`;
      console.log(chalk.rgb(255, 140, 0).bold(warn));
    }

    if (filteredReferencesCount > 0) {
      let filteredReferencesWarnings = GroupMessages.flush(
        GroupMessages.GROUP.FilteredOutputReferences,
      ).join('\n    ');
      let title = `While building ${chalk
        .rgb(255, 69, 0)
        .bold(
          destination,
        )}, filtered out token references were found; output may be unexpected. Here are the references that are used but not defined in the file`;
      let help = chalk.rgb(
        255,
        165,
        0,
      )(['This is caused when combining a filter and `outputReferences`.'].join('\n    '));
      let warn = `${title}\n    ${filteredReferencesWarnings}\n${help}`;
      console.log(chalk.rgb(255, 140, 0).bold(warn));
    }
  }
}
