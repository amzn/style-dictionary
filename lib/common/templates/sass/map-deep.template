<%
//
// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// A copy of the License is located at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

%>
<%
    // for backward compatibility we need to have the user explicitly hide it
    var showFileHeader = (this.options && this.options.hasOwnProperty('showFileHeader')) ? this.options.showFileHeader : true;
    if(showFileHeader) {
        var header = '';
        header += "/*\n  Do not edit directly";
        header += "\n  Generated on " + new Date().toUTCString();
        header += "\n*/\n";
        print(header);
    }

    print("\n");

    // output the list of tokens as Sass variables
    //
    _.each(allProperties, function(prop) {
        var output = '';
        output += '$' + prop.name + ': ' + prop.value + ' !default;'
        if(prop.comment) {
        output += ' // ' + prop.comment;
        }
        output += '\n';
        print(output);
    });

    print('\n');

    // output the list of tokens as a Sass nested map
    // (the values are pointing to the variables)
    //
    print(processJsonNode(properties, 'tokens', 0));

    // recursive function to process a properties JSON node
    //
    function processJsonNode(prop, key, depth) {
        var output = '';
        var indent = ' '.repeat(depth * 2);
        if (prop.hasOwnProperty('value')) {
            output += indent + getKeyString(key, depth) + ': $' + prop.name;
        } else {
            output += indent + getKeyString(key, depth) + ': (\n';
            output += Object.keys(prop).map(function(newKey){
                var newProp = prop[newKey];
                return processJsonNode(newProp, newKey, depth + 1);
            }).join(',\n');
            output += '\n' + indent + ')';
        }
        if (depth === 0) {
            output += ';\n';
        }
        return output;
    }

    // function to get the correct key format for the Sass map
    // http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps
    //
    function getKeyString(key, depth) {
        if (depth === 0) {
            return '$' + key;
        } else {
            return '\'' + key + '\'';
        }
    }
%>