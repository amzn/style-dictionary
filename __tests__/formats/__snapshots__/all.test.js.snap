// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`formats all should return android/colors as a string 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>

<!--
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
-->
<resources>
  <color name=\\"color_red\\">#FF0000</color><!-- comment -->
  
</resources>
"
`;

exports[`formats all should return android/dimens as a string 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>

<!--
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
-->
<resources>
  
</resources>
"
`;

exports[`formats all should return android/fontDimens as a string 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>

<!--
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
-->
<resources>
  
</resources>
"
`;

exports[`formats all should return android/integers as a string 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>

<!--
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
-->
<resources>
  
</resources>
"
`;

exports[`formats all should return android/strings as a string 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>

<!--
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
-->
<resources>
  
</resources>
"
`;

exports[`formats all should return css/fonts.css as a string 1`] = `
"
"
`;

exports[`formats all should return css/variables as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

:root {
 --color_red: #FF0000; /* comment */
}
"
`;

exports[`formats all should return ios/colors.h as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import <UIKit/UIKit.h>


typedef NS_ENUM(NSInteger, ) {
color_red
};

@interface  : NSObject
+ (NSArray *)values;
+ (UIColor *)color:()color;
@end
"
`;

exports[`formats all should return ios/colors.m as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import \\".h\\"


@implementation 

+ (UIColor *)color:()colorEnum{
  return [[self values] objectAtIndex:colorEnum];
}

+ (NSArray *)values {
  static NSArray* colorArray;
  static dispatch_once_t onceToken;

  dispatch_once(&onceToken, ^{
    colorArray = @[
#FF0000
    ];
  });

  return colorArray;
}

@end
"
`;

exports[`formats all should return ios/macros as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>



#define color_red #FF0000

"
`;

exports[`formats all should return ios/plist as a string 1`] = `
"
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<!DOCTYPE plist PUBLIC \\"-//Apple//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">
<!--
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
-->
<plist version=\\"1.0\\">
  <dict>
    <key>color_red</key>
    <dict>
      <key>r</key>
      <real>NaN</real>
      <key>g</key>
      <real>NaN</real>
      <key>b</key>
      <real>NaN</real>
      <key>a</key>
      <real>1</real>
      </dict>
    <!-- comment -->
  </dict>
</plist>
"
`;

exports[`formats all should return ios/singleton.h as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

@interface  : NSObject

+ (NSDictionary *)properties;
+ (NSDictionary *)getProperty:(NSString *)keyPath;
+ (nonnull)getValue:(NSString *)keyPath;

@end
"
`;

exports[`formats all should return ios/singleton.m as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import \\".h\\"

@implementation 

+ (NSDictionary *)getProperty:(NSString *)keyPath {
  return [[self properties] valueForKeyPath:keyPath];
}

+ (nonnull)getValue:(NSString *)keyPath {
  return [[self properties] valueForKeyPath:[NSString stringWithFormat:@\\"%@.value\\", keyPath]];
}

+ (NSDictionary *)properties {
  static NSDictionary * dictionary;
  static dispatch_once_t onceToken;

  dispatch_once(&onceToken, ^{
    dictionary = @{
  @\\"color\\": @{
    @\\"red\\": @{
      @\\"value\\": #FF0000,
      @\\"name\\": @\\"color_red\\",
      @\\"category\\": @\\"color\\",
      @\\"type\\": @\\"red\\"
      }
    }
  };
  });

  return dictionary;
}

@end


"
`;

exports[`formats all should return ios/static.h as a string 1`] = `
"
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import <Foundation/Foundation.h>



extern  const color_red;
"
`;

exports[`formats all should return ios/static.m as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import \\".h\\"



 const color_red = #FF0000;
"
`;

exports[`formats all should return ios/strings.h as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import <Foundation/Foundation.h>



extern NSString * const color_red;

@interface  : NSObject
+ (NSArray *)values;
@end
"
`;

exports[`formats all should return ios/strings.m as a string 1`] = `
"
//
// __output/
//
// Do not edit directly
// Generated on Sat, 01 Jan 2000 00:00:00 GMT
//

#import \\".h\\"



NSString * const color_red = #FF0000;

@implementation 

+ (NSArray *)values {
  static NSArray* array;
  static dispatch_once_t onceToken;

  dispatch_once(&onceToken, ^{
    array = @[
      @{
  @\\"value\\": #FF0000,
  @\\"name\\": @\\"color_red\\",
    @\\"category\\": @\\"color\\",
    @\\"type\\": @\\"red\\"
  }
    ];
  });

  return array;
}

@end


"
`;

exports[`formats all should return javascript/es6 as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

export const color_red = \\"#FF0000\\"; // comment"
`;

exports[`formats all should return javascript/module as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

module.exports = {
  \\"color\\": {
    \\"red\\": {
      \\"value\\": \\"#FF0000\\",
      \\"original\\": {
        \\"value\\": \\"#FF0000\\"
      },
      \\"name\\": \\"color_red\\",
      \\"comment\\": \\"comment\\",
      \\"attributes\\": {
        \\"category\\": \\"color\\",
        \\"type\\": \\"red\\"
      },
      \\"path\\": [
        \\"color\\",
        \\"red\\"
      ]
    }
  }
};"
`;

exports[`formats all should return javascript/object as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

var _styleDictionary = {
  \\"color\\": {
    \\"red\\": {
      \\"value\\": \\"#FF0000\\",
      \\"original\\": {
        \\"value\\": \\"#FF0000\\"
      },
      \\"name\\": \\"color_red\\",
      \\"comment\\": \\"comment\\",
      \\"attributes\\": {
        \\"category\\": \\"color\\",
        \\"type\\": \\"red\\"
      },
      \\"path\\": [
        \\"color\\",
        \\"red\\"
      ]
    }
  }
};"
`;

exports[`formats all should return javascript/umd as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

(function(root, factory) {
  if (typeof module === \\"object\\" && module.exports) {
    module.exports = factory();
  } else if (typeof exports === \\"object\\") {
    exports[\\"_styleDictionary\\"] = factory();
  } else if (typeof define === \\"function\\" && define.amd) {
    define([], factory);
  } else {
    root[\\"_styleDictionary\\"] = factory();
  }
}(this, function() {
  return {
  \\"color\\": {
    \\"red\\": {
      \\"value\\": \\"#FF0000\\",
      \\"original\\": {
        \\"value\\": \\"#FF0000\\"
      },
      \\"name\\": \\"color_red\\",
      \\"comment\\": \\"comment\\",
      \\"attributes\\": {
        \\"category\\": \\"color\\",
        \\"type\\": \\"red\\"
      },
      \\"path\\": [
        \\"color\\",
        \\"red\\"
      ]
    }
  }
};
}))
"
`;

exports[`formats all should return json as a string 1`] = `
"{
  \\"color\\": {
    \\"red\\": {
      \\"value\\": \\"#FF0000\\",
      \\"original\\": {
        \\"value\\": \\"#FF0000\\"
      },
      \\"name\\": \\"color_red\\",
      \\"comment\\": \\"comment\\",
      \\"attributes\\": {
        \\"category\\": \\"color\\",
        \\"type\\": \\"red\\"
      },
      \\"path\\": [
        \\"color\\",
        \\"red\\"
      ]
    }
  }
}"
`;

exports[`formats all should return json/asset as a string 1`] = `"{}"`;

exports[`formats all should return json/flat as a string 1`] = `
"{
  \\"color_red\\": \\"#FF0000\\"
}"
`;

exports[`formats all should return json/nested as a string 1`] = `
"{
  \\"color\\": {
    \\"red\\": \\"#FF0000\\"
  }
}"
`;

exports[`formats all should return less/icons as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

"
`;

exports[`formats all should return less/variables as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

@color_red: #FF0000; /* comment */"
`;

exports[`formats all should return sass/map-deep as a string 1`] = `
"
/*
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
*/

$color_red: #FF0000 !default; // comment

$tokens: (
  'color': (
    'red': $color_red
  )
);
"
`;

exports[`formats all should return sass/map-flat as a string 1`] = `
"
/*
  Do not edit directly
  Generated on Sat, 01 Jan 2000 00:00:00 GMT
*/

$tokens: (
  // comment
  'color_red': #FF0000
);
"
`;

exports[`formats all should return scss/icons as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

"
`;

exports[`formats all should return scss/variables as a string 1`] = `
"/**
 * Do not edit directly
 * Generated on Sat, 01 Jan 2000 00:00:00 GMT
 */

$color_red: #FF0000; /* comment */"
`;

exports[`formats all should return sketch/palette as a string 1`] = `
"{
  \\"compatibleVersion\\": \\"1.0\\",
  \\"pluginVersion\\": \\"1.1\\",
  \\"colors\\": []
}"
`;
