#!/usr/bin/env node

'use strict';

var fs = require('fs-extra'),
    program = require('commander'),
    path = require('path'),
    StyleDictionary = require('..'),
    pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));

function list(val) {
  return val.split(',');
}

function collect(val, arr) {
  arr.push(val);
  return arr;
}

program
  .version(pkg.version)
  .description(pkg.description)
  .usage('[command] [options]');


program
  .command('build')
  .description('Builds a style dictionary package from the current directory.')
  .option('-c, --config <path>', 'set config path. defaults to ./config.json')
  .option('-p, --platform [platform]', 'only build specific platforms. Must be defined in the config', collect, [])
  .action(styleDictionaryBuild);

program
  .command('init <type>')
  .description('Generates a starter style dictionary')
  .action(function(type){
    var types = ['s3', 'npm', 'complete'];
    if (types.indexOf(type) < 0) {
      console.error('Please supply 1 type of project from: ' + types.join(', '));
      process.exit(1);
    }

    fs.copySync(path.join(__dirname, '..', 'example', type), process.cwd());
    console.log('Source style dictionary starter files created!');
    console.log('');
    console.log('Running `style-dictionary build` for the first time to generate build artifacts.');
    styleDictionaryBuild();
  });

function styleDictionaryBuild(options) {
  options = options || {};
  var configPath = options.config ? options.config : './config.json';

  console.log("Reading config file from " + configPath);
  var config = JSON.parse( fs.readFileSync(configPath) );

  // Create a style dictionary object with the config
  var styleDictionary = StyleDictionary.extend( config );

  console.log("Building your style dictionary");
  if (options.platform && options.platform.length > 0) {
    options.platform.forEach(function(platform) {
      console.log('Building platform: ' + platform);
      styleDictionary.buildPlatform( platform );
    });
  } else {
    console.log('Building all platforms');
    styleDictionary.buildAllPlatforms();
  }
}

program.parse(process.argv);
